>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>Maximum Difference problem is to find the maximum of arr[j] - arr[i] where j>i.

//2,3,10,6,4,8,1
//7,9,5,6,3,2
//30,10,8,2
public class Main
{
	public static void main(String[] args) {
		maxDifference(new int[]{7,9,5,6,3,2});
	}
	public static void maxDifference(int arr[]){
	    int maxdiff = arr[1]-arr[0];
	    int min = arr[0];
	    
	    for(int i=1;i<arr.length;i++){
	        
	        if(maxdiff < arr[i]-min){
	            maxdiff = arr[i]-min;
	        }
	        
	        if(min > arr[i]){
	            min = arr[i];
	        }	        
	    }
	    System.out.println(maxdiff);
	}
}

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>Stock Buy and Sell Problem.

//1,5,3,8,12 = 13
//1,5,3,1,2,8 = 11

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>1st solution -

public class Main
{
	public static void main(String[] args) {
		maxDifference(new int[]{1,5,3,1,2,8});
	}
	public static void maxDifference(int arr[]){
	    int maxdiff = arr[1]-arr[0];
	    int min = arr[0];
	    int profit =0;
	    
	    for(int i=1;i<arr.length;i++){
	        
	        if(maxdiff < arr[i]-min){
	            maxdiff = arr[i]-min;
	            if(i == arr.length-1){
	                profit = sum+maxdiff;
	            }
	        }
	        else if(maxdiff > arr[i]-min){
	            profit = profit+maxdiff;
	            min = arr[i];
	            maxdiff = 0;
	        }
	        
	        if(min > arr[i]){
	            min = arr[i];
	        }	        
	    }
	    System.out.println(profit);
	}
}

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>2nd solution - 

//1,5,3,8,12
//1,5,3,1,2,8
public class Main
{
	public static void main(String[] args) {
		maxDifference(new int[]{1,5,3,8,12});
	}
        public static void maxDifference(int arr[]){
            int profit =0;
            
            for(int i=1;i<arr.length;i++){
                if(arr[i] > arr[i-1]){
                    profit=profit+arr[i]-arr[i-1];
                }
            }
            System.out.println(profit);
        }
}

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>Maximum subarray sum

O(n^2) soln - 

//2,3,-8,7,-1,2,3 => {7,-1,2,3} = 11
//5,8,3 = 16
//-6,-1,-8 = -1
public class Main
{
  public static void main (String[]args)
  {
    maxSubArray (new int[]{2, -8, -1});
  }
  public static void maxSubArray (int arr[])
  {

    int l = arr.length;
    int maxSum = arr[0];
    for (int i = 0; i < l; i++)
      {
	int sum = 0;
	for (int j = i; j < l; j++)
	  {
	    sum = sum + arr[j];
	    if (sum > maxSum)
	      maxSum = sum;
	  }
      }
    System.out.println (maxSum);
  }
}


O(n) soln - 

public int maxSubArray(int[] arr) {
        
        int sum=arr[0],maxSum=arr[0];
        for(int i=1;i<arr.length;i++){

            if(sum+arr[i]> arr[i])
                sum = sum+arr[i];
            else
                sum = arr[i];
				
            if(maxSum < sum)
                maxSum = sum;
        }
        return maxSum;
    }

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Given an array of integers of size ‘n’, Our aim is to calculate the maximum sum of ‘k’ consecutive elements in the array.
Input  : arr[] = {100, 200, 300, 400}, k = 2
Output : 700

Input  : arr[] = {1, 4, 2, 10, 23, 3, 1, 0, 20}, k = 4 
Output : 39
We get maximum sum by adding subarray {4, 2, 10, 23} of size 4.


Brute Force Approach -

public static void maxSubArraySum(int arr[], int k){
	    int l = arr.length;
	    int sum, maxSum = arr[0];
	    for(int i=0;i<l-k+1;i++){
	        sum = 0;
	        for(int j=0;j<k;j++){
	            sum = sum + arr[i+j];
	        }
	        if(maxSum < sum)
	            maxSum=sum;
	    }
	    System.out.println(maxSum);
	}

Sliding Window Technique || O(n) soln- 

static int maxSubArraySum(int arr[], int k)
    {
		int n = arr.length;
        // n must be greater
        if (n < k) {
            System.out.println("Invalid");
            return -1;
        }
 
        // Compute sum of first window of size k
        int max_sum = 0;
        for (int i = 0; i < k; i++)
            max_sum += arr[i];
 
        // Compute sums of remaining windows by
        // removing first element of previous
        // window and adding last element of
        // current window.
        int window_sum = max_sum;
        for (int i = k; i < n; i++) {
		
            window_sum = window_sum + arr[i] - arr[i - k];
			
			if(max_sum < window_sum)
				max_sum = window_sum;
        }
 
        return max_sum;
    }


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>	
Input: arr[] = {1, 4, 20, 3, 10, 5}, sum = 33
Output: Sum found between indexes 2 and 4
Explanation: Sum of elements between indices 2 and 4 is 20 + 3 + 10 = 33

Input: arr[] = {1, 4, 0, 0, 3, 10, 5}, sum = 7
Output: Sum found between indexes 1 and 4
Explanation: Sum of elements between indices 1 and 4 is 4 + 0 + 0 + 3 = 7

	
public static void maxSubArraySum(int arr[], int s){
	    int l = arr.length;
	    int sum = arr[0];
	    
	    if(sum == s){
	        System.out.println("index= "+0);
	    }
	    
	    int j =0, k =0;
	    
	    for(int i=1;i<l;i++){
	        
	        if(sum < s){
	            sum = sum+arr[i];
	        }
	        if(sum > s) {
	            
	            while(j<i && sum > s){
	                sum = sum - arr[j];
	                j++;
	                
	            }
	        }
	        if(sum == s){
	            System.out.println(j+" "+i);
	            break;
	        }
	    }
	    
	    System.out.println("not found");
	}

soln 2 -

public static void find(int[] a, int target) {
			
		  if (a.length < 2 || target < 0) {
			System.out.println("-1 -1");
			return;
		  }
		  int start = 0, end = 1, n = a.length;
		  int runningSum = a[start] + a[end];
		  
		  while (end < n) {
			  
			if (runningSum == target) {
			  System.out.println(start+" "+end);
			  return;
			} 
			
			else if (runningSum > target) {
			  runningSum -= a[start];
			  start++;
			}
			
			else if (runningSum < target) {
			  end++;
			  if (end < n) {
				runningSum += a[end];
			  }			
			}
		  }
		System.out.println("-1 -1");
		}	

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

>>>>>https://leetcode.com/problems/running-sum-of-1d-array/ 

Input: nums = [1,2,3,4]
Output: [1,3,6,10]
Explanation: Running sum is obtained as follows: [1, 1+2, 1+2+3, 1+2+3+4].

Input: nums = [1,1,1,1,1]
Output: [1,2,3,4,5]
Explanation: Running sum is obtained as follows: [1, 1+1, 1+1+1, 1+1+1+1, 1+1+1+1+1].

public int[] runningSum(int[] arr) {
        
        int sum = arr[0];
        for(int i=1;i<arr.length;i++){
            sum = sum+arr[i];
            arr[i] = sum;
        }
        return arr;
    }


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

>>>>>https://leetcode.com/problems/two-sum-ii-input-array-is-sorted/
 
Given a 1-indexed array of integers numbers that is already sorted in non-decreasing order,
find two numbers such that they add up to a specific target number. 
Let these two numbers be numbers[index1] and numbers[index2] where 1 <= index1 < index2 <= numbers.length.
The tests are generated such that there is exactly one solution. You may not use the same element twice.

Input: numbers = [2,7,11,15], target = 9
Output: [1,2]
Explanation: The sum of 2 and 7 is 9. Therefore, index1 = 1, index2 = 2. We return [1, 2].

Input: numbers = [2,3,4], target = 6
Output: [1,3]
Explanation: The sum of 2 and 4 is 6. Therefore index1 = 1, index2 = 3. We return [1, 3].

Input: numbers = [-1,0], target = -1
Output: [1,2]
Explanation: The sum of -1 and 0 is -1. Therefore index1 = 1, index2 = 2. We return [1, 2].


public int[] twoSum(int[] arr, int target) {

        int l=0,r=arr.length-1,sum;
        while(l<r){
            sum = arr[l] + arr[r];

            if(sum > target)
                r--;
            else if(sum < target)
                l++;
            else
                return new int[]{l+1,r+1};
        }
        return new int[]{-1,-1};
    }

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>	

>>>>>https://leetcode.com/problems/increasing-triplet-subsequence/ 

Given an integer array nums, return true if there exists a triple of indices (i, j, k) 
such that i < j < k and nums[i] < nums[j] < nums[k]. If no such indices exists, return false.	

class Solution {
    public boolean increasingTriplet(int[] arr) {
	
	    int first = Integer.MAX_VALUE, second =Integer.MAX_VALUE;
		
        for(int i=0;i<arr.length;i++){

            if(arr[i] < first)
                first = arr[i];

            else if(arr[i] > first && arr[i] < second)
                second = arr[i];

            else if(arr[i] > second)
                return true;
        }
        return false;
    }
}

/* 2ms -- Beats 100%*/
class Solution {
    public boolean increasingTriplet(int[] arr) {
	    int first = Integer.MAX_VALUE, second =Integer.MAX_VALUE;
        for(int i=0;i<arr.length;i++){

            if(arr[i] <= first)
                first = arr[i];

            else if( arr[i] <= second)
                second = arr[i];

            else 
                return true;
        }
        return false;
    }
}	



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>	

>>>>>https://leetcode.com/problems/find-the-duplicate-number/

Given an array of integers nums containing n + 1 integers where each integer is in the range [1, n] inclusive.

There is only one repeated number in nums, return this repeated number.



public int findDuplicate(int[] arr) {
        
        int l = arr.length;
        int index;
        for(int i=0;i<l;i++){
            if(arr[i] < 0)
                index = arr[i]*-1;
            else
                index = arr[i];
            if(arr[index] < 0)
                return index;
            arr[index] = arr[index]*-1;
        }
        return -1;
    }	
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>SORTING>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>Bubble Sort
	
    
    static void bubbleSort(int arr[], int n){
        boolean swapped;
        
        for(int i = 0; i < n; i++){
            
            swapped = false; //if in any iteration of j swapping didnt happen then array is already sorted
            
            for(int j = 0; j < n - i - 1; j++){
                if( arr[j] > arr[j + 1]){
                    
                    // swapping
                    int temp = arr[j];
                    arr[j] = arr[j+1];
                    arr[j+1] = temp;
                    
                    swapped = true;
                    
                }
            }
            if(swapped == false)
            break;
        }
    }
	
	
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>Selection Sort	
	
static void selectionSort(int arr[], int n){
        for(int i = 0; i < n; i++){
            int min_ind = i;
            
            for(int j = i + 1; j < n; j++){
                if(arr[j] < arr[min_ind]){
                    min_ind = j;
                }
            }
            
            int temp = arr[i];
            arr[i] = arr[min_ind];
            arr[min_ind] = temp;
        }
    }
		
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>Transpose of a matrix


	static void transpose(int mat[][])
	{

		for(int i = 0; i < n; i++)
			for(int j = i + 1; j < n; j++)
				swap(mat, i, j);
	}

	static void swap(int mat[][], int i, int j)
	{
			int temp = mat[i][j];
			mat[i][j] = mat[j][i];
			mat[j][i] = temp;
	}
	
	
	

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>HASHING>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


>>>>>WAP to find if array contains a pair of elements whose sum is equal to given 'sum' in Unsorted array


static boolean pairWithSumX(int arr[], int sum)
    {
        HashSet<Integer> hs = new HashSet<>();
        for(int i = 0; i < arr.length; i++)
        {
            if(hs.contains(sum - arr[i]))
              return true;
              
            hs.add(arr[i]);
        }
        return false;
        
    }
	
	
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>	
	
>>>>>Subarray with zero sum

{-1, 4, -3, 5, 1} = -1+4+(-3) = 0

{5,6,0,8} = 0

static int ZeroSumSubarray(int arr[], int n)
    {
        Set<Integer> us = new HashSet<Integer>();
        int prefix_sum = 0;
        us.add(0);
        for(int i = 0; i < n; i++)
        {
            prefix_sum += arr[i];
            if(us.contains(prefix_sum) == true)
              return 1;
            if(prefix_sum == 0)
              return 1;    
              
            us.add(prefix_sum);
        }
        
        return 0;
    }
	
	
	
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>	
	
>>>>>Subarray with given sum = sum:

arr = {5,8,6,13,3,-1},sum = 22 ==> {6+13+3} = 22

Logic: we store the sum at all indexes in a hashset i.e. {5,13,19,32,35,34} (for efficiency we don't compute it from begeinning but compute it as we iterate)
from example, required sum is 22 i.e. {6+13+3} and our computed sum at element 3's position is 35 i.e. (5+8)+(22 or 6+13+3)
then, (computedSum - sum) = (35 - 22) = (5+8) i.e. 13 which is the computed sum at 2's position 

so, we can say if  (computedSum - sum) is already present in hashset then the subarray sum is also present and return true. 


public static boolean findSubarraywithSum(int arr[], int sum){

        Set<Integer> hs = new HashSet<>();
        int preSum = 0;

        for (int i = 0; i < arr.length; i++) {
            preSum = preSum+arr[i];

            if(preSum == sum)
                return true;
            if(hs.contains(preSum-sum)){
                return true;
            }
            hs.add(preSum);
        }

        return false;
    }
	
	

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>	
	
>>>>> Count of Subarray with given sum = sum:
Input : arr[] = {10, 2, -2, -20, 10}, k = -10
Output : 3
Explanation: Subarrays: arr[0…3], arr[1…4], arr[3..4] have a sum exactly equal to -10.

Input : arr[] = {9, 4, 20, 3, 10, 5}, k = 33
Output : 2
Explanation: Subarrays : arr[0…2], arr[2…4] have a sum exactly equal to 33.

Logic: same logic as ==> Subarray with given sum = sum but here we are using a HashMap to store the prevSum(key) as well as the count of prevSum(value) in the map.
if (prevSum - sum) is already present in HM then get the count(value) from HM and add it to result count. 
	
	

public int subarraySum(int[] arr, int sum) {
        
        Map<Integer,Integer> hm = new HashMap<>();
        int prevSum = 0, count = 0;
        hm.put(0,1);			// to tackle corner case when subarray starts from pos 0.

        for (int i = 0; i < arr.length; i++) {
            prevSum = prevSum + arr[i];

            if(hm.containsKey(prevSum - sum)){
                count = count + hm.get(prevSum - sum);  	//if prevSum is present then increment count by prevSum's count
            }
            hm.put(prevSum, hm.getOrDefault(prevSum, 0)+1);  // storing the prevSum as will as the count
        }
        return count;
    }